PythonAdvanced

function 函数 （要多使用函数，方便，少变量，好改错）

	函数是可以重复执行的语句块，可以重复使用

	作用：
		1、用于封装语句块，提高代码的重用性
		2、定义用户级别的函数

	def 语句 函数定义（创建）语句的语法：
		def 函数名(形参列表):
			语句块

	说明：
		1、函数的名字就是语句块的名称
		2、函数名的命名规则和变量名相同（函数名必须为标识符）
		3、函数有自己的命名空间，在函数外部不可以访问函数内部的变量，在函数内部可以访问函数外部的变量，通常让函数处理外部数据需要用参数给函数传入一些数据。
		4、函数的参数列表可以为空
		5、语句部分不能为空。如果为空需要补充pass语句

	示例：001fun.py

函数的调用

    函数名（实际调用传递参数列表）
    注：实际调用传递参数以后称为实参

    说明：
        函数调用是一个表达式
        如果没有return语句，次函数执行完毕后返回None对象，如果函数需要返回其他的对象需要用到return语句

    示例：001def.py

return 语句
	
	语法：return [表达式] []可以省略

	作用：用于函数中，结束当前函数的执行，返回到调用该函数的地方，同时返回一个对象的引用关系

	说明：
		1、return语句后跟的表达式可以省略，省略后相当于return None
		2、如果函数没有return语句，则函数执行完最后一条语句后返回None（相当于在最后加了一条return None语句）
		3、函数调用一定会返回一个对象的引用

参数传递

	传递方式：（位置传参、关键字传参）

	位置传参：实际参数（实参）的对应关系与形式参数（形参）的对应关系是按位置来依次对应的

		示例：
			def myfun(a, b, c):
				print('a绑定的是',a)
				print('b绑定的是',b)
				print('c绑定的是',c)
			myfun(1, 2, 3)

		说明：实际参数和形式参数通过位置进行传递的匹配，实参个数必须与形参个数相同

	序列传参：序列传参是指在函数调用过程中，用 * 将序列拆解后按位置传参的方式进行参数传递

		示例：
			def myfun(a, b, c):
				print('a绑定的是',a)
				print('b绑定的是',b)
				print('c绑定的是',c)
			s1 = [1, 2, 3]
			myfun(*s1)         # 等同于myfun(s[0], s[1], s[2])
			s2 = "ABC"
			myfun(*s2)

	关键字传参：关键字传参是指传参时，按着形参的名称给形参赋值，实参和形参按名称进行匹配

		示例：
			def my fun(a, b, c):
				print('a绑定的是',a)
				print('b绑定的是',b)
				print('c绑定的是',c)
			myfun(b=22, c=33, a=11) # 等同于myfun(11,22,33)
			myfun(c=3, b=2, a=1)

		说明：实参和形参可以不按照位置匹配

	字典关键字传参：是指实参为字典，将字典用 ** 拆解后进行关键词传参

		示例：
			def my fun(a, b, c):
				print('a绑定的是',a)
				print('b绑定的是',b)
				print('c绑定的是',c)
			d = {'c': 33, 'b': 22, 'a': 11}
			myfun(**d) # 拆解字典后再传参

		说明：字典的键名和形参名必须一致；字典键名必须为字符串；字典的键名要在形参中存在

	<综合传参>:函数传递方式，在能确定形参能唯一匹配到相应实参的情况下可以任意组合

		示例：
			def mufun(a, b, c):
				pass
			myfun(100, *[200, 300])
			mufun(*'AB', 300)
			myfun(1, **{'c': 3, 'b': 2})
			myfun(b=2, c=3, 1)  # 错误，不能确定1给谁

		说明：传参时先位置传参，后关键字传参

形参（如何接收实参）

	<缺省参数>

		语法：def 函数名(形参名1=默认实参1, 形参名2=默认实参2....)

		示例：
			def info(name, age=1, address='未填写'):
				print(name, "今年", age, "岁，家庭地址是：", adress)
			info('Howie', 15)
			info('Howie', 20, '背景')
			info('小李')

		说明：
			1、缺省参数必须从右到左依次存在，如果一个参数有缺省参数，则基右侧的所有参数都必须有缺省参数，如：
				def test(a, b=10, c): # 错的
					pass
			2、缺省参数可以有0个或多个，甚至全部都有缺省参数

	函数的形参定义方式：（位置形参，星号元组形参，命名关键字形参，双星号字典形参）

	<位置形参>

		语法：def 函数名(形参名1, 形参名2, ....)
				语句块

	<星号元组形参>

		语法：def 函数名(*元组形参名):
				语句块

		说明：元组形参名通常用'args'（绑定的是一个元组）

		示例:
			def func(*args):
				print("参数个数是", len(args))
				print("args =", args)
			func(1,2,3,4)
			func("hello","world",1,2,3)

	<命名关键字形参>

		语法：def 函数名(*, 命名关键字形参)：
				语句
			或
			  def 函数名(*args, 命名关键字形参)：
			  	语句

		作用：所有的参数都必须用关键字传参或字典关键字传参传递

		示例：
			def fn(*, d, e):
				print("d=", d)
				print("e=", e)
			fn(d=100, e=200)
			fn(1, 2) # 错误，因为有*号，只要有*，右边强制进行关键字传参

			def fn(*args, d, e):
				print(args)
				print("d=", d)
				print("e=", e)
			fn(1, 2, d=100, e=200)
			例如：print内部函数

	<双星号字典形参>

		语法：def 函数名(**字典形参名)：
				语句

		作用：收集多个的关键字形参
		说明：通常字典形参名定为:"kwargs"

		示例：
			def func(**kwargs):
				print("关键字参数的个数是：", len(fnkwargs))
				print("kwargs =", kwargs)
			func(name='Howie', age = 15)

	【函数参数自左向右的顺序为：位置形参，星号元组形参，命名关键字形参，双星号字典形参】
		综合示例：
			def f1(a, b, *args, c, **kwargs):
				print("a=", a)
				print("b=", b)
				print("args=", args)
				print("c=", c)
				print("kwargs=", kwargs)
			f1(1, 2, 3, 4, d=6, c=5, e=7)
			f1(*"hello", d=6, **{'c':5, 'e':7})

不定长参数
	
	def fn(*args, **kwargs):
		print(args)
		print(kwargs)
	# 可以接受任意的位置传参和关键字传参
